from bin.var import current, boss_list
from bin.buttons_generators import main_buttons
from libs.chat import Chat
from telegram.error import BadRequest
from telegram import InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext

from uuid import uuid4


class Quest:
    """
    –ö–ª–∞—Å—Å –∫–≤–µ—Å—Ç–∞ —Å –±–æ—Å—Å–æ–º
    Args:
        q_id: –ò–Ω–¥–µ—Ç–µ—Ñ–∏–∫—Ç–æ—Ä –∫–≤–µ—Å—Ç–∞
        players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–≤–µ—Å—Ç–∞
        boss_index: –ù–æ–º–µ—Ä –±–æ—Å—Å–∞
    """

    def __init__(self, q_id: str, players: dict, boss_index: int):
        self.players = {} if not players else players
        self.qn = boss_index
        self.qid = q_id

    def update(self) -> int:
        """
        –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
        """
        current.update({self.qid: self})
        return 100

    @staticmethod
    def create(update: Update, context: CallbackContext) -> None:
        """
        –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤.
        :param context: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
        :param update: –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        """
        bot = context.bot
        mes = update.message
        chat = mes.chat
        qid = uuid4().hex[:4]
        pin = Chat.get(mes.chat_id).settings['pin']

        text = f"<code>{qid}</code>\n" \
               f"<b>üåü–≠–ª–∏—Ç–Ω—ã–π: {boss_list[1]}</b>\n\n" \
               f"<b>–°–æ—Å—Ç–∞–≤:</b>\n"

        sent = chat.send_message(text=text,
                                 reply_markup=InlineKeyboardMarkup(main_buttons),
                                 parse_mode="HTML").message_id

        if pin == 'enabled':
            try:
                bot.pin_chat_message(chat_id=chat.id,
                                     message_id=sent,
                                     disable_notification=True)
            except BadRequest:
                pass

        try:
            mes.delete()
        except BadRequest:
            pass

        quest = Quest(qid, {}, 1)
        quest.update()

    @staticmethod
    def close(update: Update, context: CallbackContext) -> None:
        """
        –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–≤–µ—Å—Ç–æ–º. –£–¥–∞–ª—è–µ—Ç –∫–≤–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.
        :param context: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
        :param update: –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        """
        mes = update.message
        quest_mes = mes.reply_to_message
        bot = context.bot

        try:
            mes.reply_to_message.edit_reply_markup(reply_markup=None)
        except (AttributeError, BadRequest):
            return

        try:
            current.pop(quest_mes.text[:4])
        except (KeyError, AttributeError):
            return

        try:
            mes.delete()
        except BadRequest:
            return

        try:
            bot.unpin_chat_message(chat_id=mes.chat_id)
        except BadRequest:
            return
